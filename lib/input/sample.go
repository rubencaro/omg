package input

// These are the contents to be written into the default config file
// when it does not exist.
var sample = `# This is the autogenerated config file for OMG

# Here you can customize global scope options
# There are more specific sections below

# You can customize the actual command to open a terminal
# Syntax is std Go templates (https://golang.org/pkg/text/template/)
# OMG will replace 'Title' and 'Command'
# terminal = "terminator -T '{{.Title}}' -e '{{.Command}}' &"
# terminal = "mate-terminal -t '{{.Title}}' -e '{{.Command}}' &"
# terminal = "konsole -e '{{.Command}}' &"
# terminal = "gnome-terminal -e '{{.Command}}' &"

# You can define a default user name for all remote operations
# remoteuser = "myuser"

[custom]
# Here you can bind new OMG commands to your own scripts

# This would make 'omg mycmd' run 'scripts/myscript.sh'
#   mycmd = "scripts/myscript.sh"

# This would make 'omg serve' run Brunch in server mode
#   serve = "node_modules/brunch/bin/brunch w --server"

# Any further flags or arguments are passed to the given command
# With this line
#   brunch = "node_modules/brunch/bin/brunch"
# you could make 'omg brunch w --server' run the same as before

[servers]
# Here you can specify a fixed list of servers, like this:
#   serverA = { ip="localhost" }
#   serverB = { ip="130.211.79.198", remoteuser="differentuser" }
# Be aware that any automatic way of getting the server list,
# just like configuring GCE, will overwrite this list

[gce]
# Here you could give a GCE project id and a regexp to filter server names
#   project = "project-id"
#   match = "regexstr"
# This will run 'gcloud' to get the server list, you should have it configured
`
